"""
Operator to shorten a dataframe that has a date column per row per participant.
"""

import pandas as pd

from tasrif.processing_pipeline import ProcessingOperator


class ChangeDateFormatToStartToEnd(ProcessingOperator):
    """
    This method converts the format of a dataframe that has a date column per row per participant.
    The output of this operator will be a dataframe that shows the start date and end date per participant.
    An example scenario would be to 'shorten' the original dataframe to show a summary of when the participant
    started the sleep activity and when the participant ended that activity. This operator assumes that
    `date_feature_name` is sorted.

    The pseudo code of this operator is to group by participantIdentifier, fetch the first date, and end date
    of each group, then return a list of [participantIdentifier, startDate, endDate].
    See example below for clarification.

    >>> import pandas as pd
    >>>
    >>> from tasrif.processing_pipeline.custom import ChangeDateFormatToStartToEnd
    >>> from tasrif.processing_pipeline.pandas import ReadCsvOperator
    >>>
    >>> reader = ReadCsvOperator('../../examples/quick_start/activity_long.csv')
    >>> df = reader.process()[0]
    >>>
    >>> operator = ChangeDateFormatToStartToEnd(date_feature_name="date",
    >>>                                         participant_identifier=['Id', 'logId'])
    >>> df = operator.process(df)[0]
    >>> df
    Id  logId   start   end
    0   122     1   2016-03-13 02:39:00     2016-03-13 06:05:00
    1   122     2   2016-03-13 06:06:00     2016-03-13 06:35:00
    2   144     1   2016-03-13 06:36:00     2016-03-13 09:44:00
    3   167     1   2016-03-14 01:32:00     2016-03-14 07:57:00
    4   167     2   2016-03-15 02:36:00     2016-03-15 03:02:00
    5   167     3   2016-03-15 03:03:00     2016-03-15 03:57:00
    6   167     4   2016-03-15 03:58:00     2016-03-15 05:43:00
    """
    def __init__(self,
                 date_feature_name,
                 participant_identifier,
                 start_column_name='start',
                 end_column_name='end'):
        """Creates a new instance of EncodeCyclicalFeaturesOperator

        Args:
            date_feature_name : str
                Name of the feature to identify related timestamp series
            participant_identifier : str or list of str
                Name of the feature(s) identifying the participant
            start_column_name : str
                Name of the start column generated by this operator
            end_column_name : str
                Name of the end column generated by this operator
        """
        super().__init__()
        self.date_feature_name = date_feature_name
        self.participant_identifier = participant_identifier
        self.start_column_name = start_column_name
        self.end_column_name = end_column_name

    def _process(self, *data_frames):
        """Processes the passed data frame as per the configuration define in the constructor.

        Args:
            *data_frames (list of pd.DataFrame):
              Variable number of pandas dataframes to be processed

        Returns:
            pd.DataFrame -or- list[pd.DataFrame]
                Processed dataframe(s) resulting from applying the operator
        """

        processed = []
        for data_frame in data_frames:
            start_to_end = data_frame.groupby(self.participant_identifier).apply(self._show_start_to_end)
            start_to_end = start_to_end.reset_index(level=self.participant_identifier)
            start_to_end = start_to_end.reset_index(drop=True)
            processed.append(start_to_end)

        return processed


    def _show_start_to_end(self, dataframe):
        start = dataframe[self.date_feature_name].iloc[0]
        end = dataframe[self.date_feature_name].iloc[-1]
        start_to_end = pd.DataFrame([[start, end]],
                                    columns=[self.start_column_name, self.end_column_name])
        return start_to_end
