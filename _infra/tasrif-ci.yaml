trigger:
  batch: true
  branches:
    include:
    - master
resources:
  - repo: self
# Builds can fail on self-hosted agents if they are not cleaned occasionally.
parameters:
- name: clean
  displayName: Checkout clean
  type: boolean
  default: false
  values:
  - false
  - true

pool: tasrif-pool

stages:
  - stage: Build
    jobs:
    - job: BuildTasrif
      displayName: Build Tasrif
      steps:
      - checkout: self
        clean: ${{ parameters.clean }}
      - task: Docker@2
        displayName: 'Build and push image'
        inputs:
          command: buildAndPush
          repository: $(Build.Repository.Name)
          containerRegistry: tasrif-acr
          # Set tag to 'latest' only on builds from master branch
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            tags: |
              $(Build.BuildId)
              latest
          ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
            tags: |
              $(Build.BuildId)
  - stage: Test
    jobs:
    - job: RunPylint
      displayName: Run pylint
      steps:
      - checkout: none # No need, docker run will pull the image
      - task: Docker@2
        displayName: 'Run pylint'
        inputs:
          command: run # Docker@2 can take direct docker commands as input
          containerRegistry: tasrif-acr
          arguments: >-
            -v $(System.DefaultWorkingDirectory)/pylint:/home/pylint
            qcriswtasrif.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)
            /home/run-pylint.sh
      - task: PublishTestResults@2
        displayName: 'Publish pylint results'
        inputs:
          testResultsFormat: 'Junit'
          testResultsFiles: '**/*.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/pylint'
          publishRunAttachments: true
          testRunTitle: 'Pylint'
        condition: succeededOrFailed()
    - job: RunUnitTests
      displayName: Run unit tests
      steps:
        # Checkout the repo here so that references to the source files in
        # the coverage results are correctly linked.
      - checkout: self
      - task: Docker@2
        displayName: Use Docker to run unit tests
        inputs:
          command: run
          containerRegistry: tasrif-acr
          arguments: >-
            --env PYTHONPATH=/home/ --entrypoint "/bin/bash"
            -v $(System.DefaultWorkingDirectory):/home/
            qcriswtasrif.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)
            -c "pytest -v --ignore=/home/tasrif/test_scripts
            --cov=tasrif --cov-report=xml --junitxml=/home/unit-tests.xml
      - task: PublishTestResults@2
        displayName: 'Publish unit tests results'
        inputs:
          testResultsFormat: 'Junit'
          testResultsFiles: '**/unit-tests.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          publishRunAttachments: true
          testRunTitle: 'Unit tests'
        condition: succeededOrFailed()
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 2.2.203
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish coverage report'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
          pathToSources: $(Build.SourcesDirectory)
    - job: RunNotebookTests
      displayName: Run notebook tests
      steps:
      - checkout: none
      - task: Docker@2
        displayName: Use Docker to run notebook tests
        inputs:
          command: run
          containerRegistry: tasrif-acr
          arguments: >-
            --env PYTHONPATH=/home/ --entrypoint "/bin/bash"
            -v $(System.DefaultWorkingDirectory):/home/
            qcriswtasrif.azurecr.io/$(Build.Repository.Name):$(Build.BuildId)
            -c "pytest -v /home/tasrif/test_scripts/entrypoint.py
            --junitxml=/home/notebook-tests.xml"
      - task: PublishTestResults@2
        displayName: 'Publish notebook tests results'
        inputs:
          testResultsFormat: 'Junit'
          testResultsFiles: '**/notebook-tests.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          publishRunAttachments: true
          testRunTitle: 'Notebook tests'
        condition: succeededOrFailed()

